"use strict";(self.webpackChunktodo=self.webpackChunktodo||[]).push([[826],{945:()=>{const t=JSON.parse(localStorage.getItem("list"))||[],e=document.querySelector(".inp"),a=document.getElementById("addtodo"),s=document.querySelector(".inp"),i=JSON.parse(localStorage.getItem("list"))||[];s.addEventListener("keypress",(a=>{"Enter"===a.key&&((()=>{const a={description:e.value,completed:!1,index:t.length};""!==a.description&&t.push(a),localStorage.setItem("list",JSON.stringify(t))})(),window.location.reload())}));const l=document.querySelector("#addtodo"),r=document.getElementsByClassName("li-list");l.addEventListener("click",(t=>{for(let t=0;t<r.length;t+=1)r[t].classList.remove("active");t.target.classList.contains("li-list")?t.target.classList.toggle("active"):t.target.classList.contains("paragraph")&&t.target.parentElement.classList.toggle("active")})),l.addEventListener("click",(e=>{var a;e.target.classList.contains("fa-trash-can")&&(a=e.target.getAttribute("data-index"),t.splice(a,1),localStorage.setItem("list",JSON.stringify(t)),window.location.reload())})),(()=>{for(let t=0;t<i.length;t+=1)i[t].index=t;localStorage.setItem("list",JSON.stringify(i)),i.forEach(((t,e)=>{a.innerHTML+=`<li class="li-list" ><input class="li-list" type="checkbox" data-com="${t.completed}"> <p contenteditable="true" class="paragraph" data-para="${e}">${t.description}</p><i class="fa-regular fa-trash-can" data-index="${e}"></i> <i class="li-list fa-solid fa-ellipsis-vertical"></i></li>`}))})(),l.addEventListener("keypress",(t=>{if(t.target.classList.contains("paragraph")&&"Enter"===t.key){if(""===t.target.textContent)return!1;const e=t.target.getAttribute("data-para");i[e].description=t.target.textContent,window.location.reload()}return localStorage.setItem("list",JSON.stringify(i))}))}},t=>{t(t.s=945)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJxRkFBQSxNQUFNQSxFQUFRQyxLQUFLQyxNQUFNQyxhQUFhQyxRQUFRLFVBQVksR0FDcERDLEVBQVFDLFNBQVNDLGNBQWMsUUNDL0JDLEVBQVlGLFNBQVNHLGVBQWUsV0FDcEMsRUFBUUgsU0FBU0MsY0FBYyxRQUMvQixFQUFRTixLQUFLQyxNQUFNQyxhQUFhQyxRQUFRLFVBQVksR0FPMUQsRUFBTU0saUJBQWlCLFlBQWFDLElBQ3BCLFVBQVZBLEVBQUVDLE1EVkksTUFDVixNQUFNQyxFQUFTLENBQ2JDLFlBQWFULEVBQU1VLE1BQ25CQyxXQUFXLEVBQ1hDLE1BQU9qQixFQUFNa0IsUUFFWSxLQUF2QkwsRUFBT0MsYUFDVGQsRUFBTW1CLEtBQUtOLEdBRWJWLGFBQWFpQixRQUFRLE9BQVFuQixLQUFLb0IsVUFBVXJCLEdBQU8sRUNFakQsR0FDQXNCLE9BQU9DLFNBQVNDLFNBQ2xCLElBRUYsTUFBTUMsRUFBcUJuQixTQUFTQyxjQUFjLFlBQzVDbUIsRUFBVXBCLFNBQVNxQix1QkFBdUIsV0FDaERGLEVBQW1CZixpQkFBaUIsU0FBVUMsSUFDNUMsSUFBSyxJQUFJaUIsRUFBSSxFQUFHQSxFQUFJRixFQUFRUixPQUFRVSxHQUFLLEVBQ3ZDRixFQUFRRSxHQUFHQyxVQUFVQyxPQUFPLFVBRTFCbkIsRUFBRW9CLE9BQU9GLFVBQVVHLFNBQVMsV0FDOUJyQixFQUFFb0IsT0FBT0YsVUFBVUksT0FBTyxVQUNqQnRCLEVBQUVvQixPQUFPRixVQUFVRyxTQUFTLGNBQ3JDckIsRUFBRW9CLE9BQU9HLGNBQWNMLFVBQVVJLE9BQU8sU0FDMUMsSUFHRlIsRUFBbUJmLGlCQUFpQixTQUFVQyxJRGYvQixJQUFDTSxFQ2dCVk4sRUFBRW9CLE9BQU9GLFVBQVVHLFNBQVMsa0JEaEJsQmYsRUNpQkVOLEVBQUVvQixPQUFPSSxhQUFhLGNEaEJ0Q25DLEVBQU1vQyxPQUFPbkIsRUFBTyxHQUNwQmQsYUFBYWlCLFFBQVEsT0FBUW5CLEtBQUtvQixVQUFVckIsSUNpQjFDc0IsT0FBT0MsU0FBU0MsU0FDbEIsSUFFYSxNQUNiLElBQUssSUFBSUksRUFBSSxFQUFHQSxFQUFJLEVBQU1WLE9BQVFVLEdBQUssRUFDckMsRUFBTUEsR0FBR1gsTUFBUVcsRUFFbkJ6QixhQUFhaUIsUUFBUSxPQUFRbkIsS0FBS29CLFVBQVUsSUFuQzVDLEVBQU1nQixTQUFRLENBQUNDLEVBQU1yQixLQUNuQlQsRUFBVStCLFdBQWEseUVBQXlFRCxFQUFLdEIsc0VBQXNFQyxNQUFVcUIsRUFBS3hCLGlFQUFpRUcsb0VBQXdFLEdBbUM1VCxFQUVYdUIsR0FDQWYsRUFBbUJmLGlCQUFpQixZQUFhQyxJQUMvQyxHQUFJQSxFQUFFb0IsT0FBT0YsVUFBVUcsU0FBUyxjQUNoQixVQUFWckIsRUFBRUMsSUFBaUIsQ0FDckIsR0FBNkIsS0FBekJELEVBQUVvQixPQUFPVSxZQUNYLE9BQU8sRUFFVCxNQUFNQyxFQUFNL0IsRUFBRW9CLE9BQU9JLGFBQWEsYUFDbEMsRUFBTU8sR0FBSzVCLFlBQWNILEVBQUVvQixPQUFPVSxZQUNsQ25CLE9BQU9DLFNBQVNDLFFBQ2xCLENBRUYsT0FBT3JCLGFBQWFpQixRQUFRLE9BQVFuQixLQUFLb0IsVUFBVSxHQUFPLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLy4vc3JjL21vZHVsZXMvZnVudGlvbnMuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBUYXNrcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xpc3QnKSkgfHwgW107XG5jb25zdCBpbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnAnKTtcbmNvbnN0IEFkZCA9ICgpID0+IHtcbiAgY29uc3QgY3JlYXRlID0ge1xuICAgIGRlc2NyaXB0aW9uOiBpbnB1dC52YWx1ZSxcbiAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgIGluZGV4OiBUYXNrcy5sZW5ndGgsXG4gIH07XG4gIGlmIChjcmVhdGUuZGVzY3JpcHRpb24gIT09ICcnKSB7XG4gICAgVGFza3MucHVzaChjcmVhdGUpO1xuICB9XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsaXN0JywgSlNPTi5zdHJpbmdpZnkoVGFza3MpKTtcbn07XG5leHBvcnQgZGVmYXVsdCBBZGQ7XG5cbmNvbnN0IFJlbW92ZSA9IChpbmRleCkgPT4ge1xuICBUYXNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGlzdCcsIEpTT04uc3RyaW5naWZ5KFRhc2tzKSk7XG59O1xuZXhwb3J0IHsgUmVtb3ZlIH07IiwiaW1wb3J0IEFkZCwgeyBSZW1vdmUgfSBmcm9tICcuL21vZHVsZXMvZnVudGlvbnMuanMnO1xuXG5jb25zdCBDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkdG9kbycpO1xuY29uc3QgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wJyk7XG5jb25zdCBUYXNrcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xpc3QnKSkgfHwgW107XG5jb25zdCBEaXNwbGF5ID0gKCkgPT4ge1xuICBUYXNrcy5mb3JFYWNoKChsaXN0LCBpbmRleCkgPT4ge1xuICAgIENvbnRhaW5lci5pbm5lckhUTUwgKz0gYDxsaSBjbGFzcz1cImxpLWxpc3RcIiA+PGlucHV0IGNsYXNzPVwibGktbGlzdFwiIHR5cGU9XCJjaGVja2JveFwiIGRhdGEtY29tPVwiJHtsaXN0LmNvbXBsZXRlZH1cIj4gPHAgY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiIGNsYXNzPVwicGFyYWdyYXBoXCIgZGF0YS1wYXJhPVwiJHtpbmRleH1cIj4ke2xpc3QuZGVzY3JpcHRpb259PC9wPjxpIGNsYXNzPVwiZmEtcmVndWxhciBmYS10cmFzaC1jYW5cIiBkYXRhLWluZGV4PVwiJHtpbmRleH1cIj48L2k+IDxpIGNsYXNzPVwibGktbGlzdCBmYS1zb2xpZCBmYS1lbGxpcHNpcy12ZXJ0aWNhbFwiPjwvaT48L2xpPmA7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXR1cm4tYXNzaWduXG4gIH0pO1xufTtcblxuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZSkgPT4ge1xuICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICBBZGQoKTtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIH1cbn0pO1xuY29uc3QgbGlzdEl0ZW1zQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FkZHRvZG8nKTtcbmNvbnN0IGxpTGlzdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsaS1saXN0Jyk7XG5saXN0SXRlbXNDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpTGlzdHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsaUxpc3RzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICB9XG4gIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2xpLWxpc3QnKSkge1xuICAgIGUudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xuICB9IGVsc2UgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncGFyYWdyYXBoJykpIHtcbiAgICBlLnRhcmdldC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xuICB9XG59KTtcblxubGlzdEl0ZW1zQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZmEtdHJhc2gtY2FuJykpIHtcbiAgICBjb25zdCBpbmRleCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xuICAgIFJlbW92ZShpbmRleCk7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG59KTtcbmNvbnN0IHVwZGF0ZSA9ICgpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBUYXNrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIFRhc2tzW2ldLmluZGV4ID0gaTtcbiAgfVxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGlzdCcsIEpTT04uc3RyaW5naWZ5KFRhc2tzKSk7XG4gIERpc3BsYXkoKTtcbn07XG51cGRhdGUoKTtcbmxpc3RJdGVtc0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChlKSA9PiB7XG4gIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BhcmFncmFwaCcpKSB7XG4gICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICBpZiAoZS50YXJnZXQudGV4dENvbnRlbnQgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG51bSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJhJyk7XG4gICAgICBUYXNrc1tudW1dLmRlc2NyaXB0aW9uID0gZS50YXJnZXQudGV4dENvbnRlbnQ7XG4gICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGlzdCcsIEpTT04uc3RyaW5naWZ5KFRhc2tzKSk7XG59KTsiXSwibmFtZXMiOlsiVGFza3MiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiaW5wdXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwia2V5IiwiY3JlYXRlIiwiZGVzY3JpcHRpb24iLCJ2YWx1ZSIsImNvbXBsZXRlZCIsImluZGV4IiwibGVuZ3RoIiwicHVzaCIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbG9hZCIsImxpc3RJdGVtc0NvbnRhaW5lciIsImxpTGlzdHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiaSIsImNsYXNzTGlzdCIsInJlbW92ZSIsInRhcmdldCIsImNvbnRhaW5zIiwidG9nZ2xlIiwicGFyZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInNwbGljZSIsImZvckVhY2giLCJsaXN0IiwiaW5uZXJIVE1MIiwidXBkYXRlIiwidGV4dENvbnRlbnQiLCJudW0iXSwic291cmNlUm9vdCI6IiJ9